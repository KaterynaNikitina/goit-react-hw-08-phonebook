{"version":3,"file":"static/js/338.13051dc0.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewContactThunk } from 'redux/contactsOperations';\nimport { selectUserContacts } from 'redux/selectors';\nimport { Notify } from 'notiflix';\nimport { Button, TextField } from '@mui/material';\nimport Box from '@mui/material/Box';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectUserContacts);\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    const form = ev.currentTarget;\n    const name = form.elements.contactName.value;\n    const number = form.elements.contactNumber.value;\n\n    const isExistingContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isExistingContact) {\n      Notify.failure(`${name} is already in contacts list!`);\n      return;\n    }\n\n    dispatch(\n      addNewContactThunk({\n        name,\n        number,\n      })\n    );\n    ev.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box\n        sx={{\n          width: '800px',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <h1>Phonebook</h1>\n        <TextField\n          id=\"outlined-basic-1\"\n          label=\"Email\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"contactName\"\n          required\n          minLength={2}\n          sx={{\n            width: '400px',\n            marginBottom: '20px',\n          }}\n        ></TextField>\n        <TextField\n          id=\"outlined-basic-1\"\n          label=\"Password\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"contactNumber\"\n          required\n          minLength={2}\n          sx={{\n            width: '400px',\n            marginBottom: '20px',\n          }}\n        ></TextField>\n\n        <Button variant=\"contained\" type=\"submit\" sx={{ width: '400px' }}>\n          Add contact\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  text-align: center;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  margin-right: 20px;\n`;\n\nexport const Paragr = styled.p`\n  font-size: 20px;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  margin-right: 20px;\n`;\n","import { Title, Paragr } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { TextField } from '@mui/material';\nimport Box from '@mui/material/Box';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n  return (\n    <div>\n      <Title>Contacts</Title>\n      <Box\n        sx={{\n          width: '800px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Paragr>Find contact by name</Paragr>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"userName\"\n          required\n          minLength={2}\n          sx={{\n            width: '300px',\n          }}\n          value={filter}\n          onChange={handleChange}\n        ></TextField>\n      </Box>\n    </div>\n  );\n};\nexport default Filter;\n","import styled from \"styled-components\";\n\nexport const Item = styled.li`\nwidth: 500px;\nfont-size: 20px;\nmargin-bottom: 16px;\nmargin-top: 16px;\ndisplay: flex;\njustify-content: space-between;\n`\n\nexport const ItemBtn = styled.button`\nfont-size: 20px;\nmargin-left: 24px;\nborder-radius: 4px;\nborder: none;\ncursor: pointer;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  &:hover {\n    background-color: blue;\n    color: #fff;\n  }\n`","import { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contactsOperations';\nimport PropTypes from 'prop-types';\nimport { Item } from './ContactItem.styled';\nimport { Button } from '@mui/material';\n\nconst ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContactThunk(id));\n  };\n  return (\n    <Item>\n      {name}: {number}\n      <Button\n        variant=\"outlined\"\n        type=\"submit\"\n        sx={{ width: '60px', \n        boxShadow: '0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06), 1px 2px 2px rgba(0, 0, 0, 0.16)', \n       \n      }}\n        onClick={() => {\n          handleDeleteContact(id);\n          \n        }}\n      >\n        Delete\n      </Button>\n    </Item>\n  );\n};\nexport default ContactItem;\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0;\n`;\n","import ContactItem from 'components/ContactItem/ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { List } from './ContactsList.styled';\nimport { useEffect } from 'react';\nimport { getAllContactsThunk } from 'redux/contactsOperations';\nimport Loader from 'components/Loader/Loader';\n\nimport {\n  selectAuthentificated,\n  selectUserContacts,\n  selectContactsLoading,\n  selectContactError,\n  selectFilter,\n} from 'redux/selectors';\n\nconst ContactsList = () => {\n  const authentificated = useSelector(selectAuthentificated);\n  const contacts = useSelector(selectUserContacts);\n  const isLoading = useSelector(selectContactsLoading);\n  const error = useSelector(selectContactError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch(selectFilter);\n\n  useEffect(() => {\n    if (!authentificated) return;\n\n    dispatch(getAllContactsThunk());\n  }, [authentificated, dispatch]);\n\n  const visibleContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  const formattedFilter = filter.toLowerCase();\n\n  const filteredContacts =\n    contacts?.length > 0\n      ? contacts.filter(contact =>\n          contact.name.toLowerCase().includes(formattedFilter)\n        )\n      : [];\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>Ooops, something went wrong...</p>}\n      <List>\n        {!visibleContacts ? (\n          <p>Your Phonebook is empty. Add new contacts</p>\n        ) : filteredContacts.length === 0 ? (\n          `There is no contct ${filter} in your Phonebook`\n        ) : (\n          filteredContacts.map(contact => {\n            return <ContactItem key={contact.id} contact={contact} />;\n          })\n        )}\n      </List>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Box from '@mui/material/Box';\n\nconst ContactsPage = () => {\n  return (\n    <Box\n      sx={{\n        maxWidth: '800px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 'auto',\n        marginRight: ' auto',\n        border: '1px transparent #2a2a2a',\n        borderRadius: '15px',\n        marginTop: '24px',\n        padding: '24px',\n        boxShadow: `0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16)`,\n        backgroundColor: '#f7f3f3',\n      }}\n    >\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n    </Box>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["dispatch","useDispatch","contacts","useSelector","selectUserContacts","_jsx","onSubmit","ev","preventDefault","form","currentTarget","name","elements","contactName","value","number","contactNumber","find","contact","toLowerCase","Notify","concat","addNewContactThunk","target","reset","children","_jsxs","Box","sx","width","display","flexDirection","justifyContent","alignItems","TextField","id","label","variant","type","required","minLength","marginBottom","Button","Title","styled","_templateObject","_taggedTemplateLiteral","Paragr","_templateObject2","filter","selectFilter","onChange","_ref","setFilter","Item","_ref$contact","boxShadow","onClick","deleteContactThunk","List","authentificated","selectAuthentificated","isLoading","selectContactsLoading","error","selectContactError","useEffect","getAllContactsThunk","visibleContacts","Array","isArray","length","formattedFilter","filteredContacts","includes","Loader","map","ContactItem","maxWidth","marginLeft","marginRight","border","borderRadius","marginTop","padding","backgroundColor","ContactForm","Filter","ContactsList"],"sourceRoot":""}